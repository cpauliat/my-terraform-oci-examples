#!/bin/bash


sed -i "s/SELINUX=enforcing/SELINUX=disabled/g" /etc/selinux/config
setenforce 0

cd /usr/lib/tuned/
cp -r throughput-performance/ nfs-ha-oci-performance

echo "

[main]
summary=nfs-ha-oci perf tuning

[cpu]
force_latency=1
governor=performance
energy_perf_bias=performance
min_perf_pct=100

[vm]
transparent_huge_pages=never

[sysctl]
net.ipv4.tcp_timestamps=1
net.ipv4.tcp_sack=1
net.ipv4.tcp_dsack=1
net.ipv4.tcp_low_latency=0
net.ipv4.tcp_adv_win_scale=1
net.ipv4.tcp_window_scaling=1
net.ipv4.tcp_slow_start_after_idle=0
net.ipv4.tcp_syn_retries=6
net.ipv4.tcp_rmem=4096 87380 16777216
net.ipv4.tcp_wmem=4096 65536 16777216
net.core.rmem_max=16777216
net.core.wmem_max=16777216
net.core.rmem_default=16777216
net.core.wmem_default=16777216
net.core.optmem_max=16777216
net.core.somaxconn = 8192
net.core.netdev_max_backlog=250000
sunrpc.udp_slot_table_entries=128
sunrpc.tcp_slot_table_entries=128
kernel.sched_min_granularity_ns = 10000000
kernel.sched_wakeup_granularity_ns = 15000000
vm.min_free_kbytes = 16777216
vm.dirty_ratio = 30
vm.dirty_background_ratio = 10
vm.swappiness=30
vm.kswapd_threads = 3
vm.watermark_scale_factor = 30
" > nfs-ha-oci-performance/tuned.conf

cd -




tuned-adm profile nfs-ha-oci-performance
tuned-adm active





echo '#
# Identify eligible SCSI disks by the absence of a SWAP partition.

ACTION=="add|change", SUBSYSTEM=="block", KERNEL=="sd*[^0-9]", PROGRAM="/usr/bin/lsblk -rno FSTYPE,MOUNTPOINT,NAME /dev/%k", RESULT!="*SWAP*", ATTR{queue/scheduler}="deadline", ATTR{queue/nr_requests}="256", ATTR{device/queue_depth}="31", ATTR{queue/max_sectors_kb}="8192", ATTR{queue/read_ahead_kb}="0", ATTR{queue/rq_affinity}="2"
' > /etc/udev/rules.d/99-oci-nfs-ha.rules
# reload the rules
udevadm control --reload-rules && udevadm trigger




# NIC tuning



cd /sys/class/net/
interface_lst=`ls | egrep -v "^lo$|docker" `
for interface in $interface_lst
do
echo $interface
# value can be Speed: Unknown!,  if not configured or not connected.
ethtool $interface | grep -i speed | egrep "Unknown|100000Mb/s"
if [ $? -eq 0 ]; then
  echo "rdma nic or speed unknown - skipping"
else
  echo "tune it"
fi
done


intel_node=false
amd_node=false
lscpu | grep "Vendor ID:"  | grep "AuthenticAMD"
if [ $? -eq 0 ];  then
  intel_node=false
  amd_node=true
else
  intel_node=true
  amd_node=false
fi



cd /sys/class/net/
interface_lst=`ls | egrep -v "^lo$|docker" `
for interface in $interface_lst
do
  echo $interface
  # value can be Speed: Unknown!,  if not configured or not connected.
  ethtool $interface | grep -i speed | egrep "Unknown|100000Mb/s"
  if [ $? -eq 0 ]; then
    echo "rdma nic or speed unknown - skipping"
  else

    ethtool -g $interface
    ethtool -G $interface rx 2047 tx 2047 rx-jumbo 8191
    ethtool -g $interface
    echo "ethtool -G $interface rx 2047 tx 2047 rx-jumbo 8191" | sudo tee -a  /etc/rc.local
  
    ethtool -l $interface
    max_combined=`ethtool -l  $interface | grep -A4 "Pre-set maximums" | grep "Combined" | gawk -F":" '{ print $2 }'` ; echo $max_combined
    ethtool -L $interface combined $max_combined
    ethtool -l $interface
    echo "ethtool -L $interface combined $max_combined" | sudo tee -a  /etc/rc.local

  fi
done
chmod +x /etc/rc.local


# Expected to be running
systemctl  status irqbalance



####
# E3 BM
####

# do not set rx-jumbo , if not set in pre-set max.
interface=enp65s0f0
interface=enp65s0f1
# add below in for loop for all NICs
rx_jumbo=`/sbin/ethtool -g $interface | grep -A4 "Pre-set maximums" | grep "RX Jumbo" | gawk -F":" '{ print $2 }' | xargs echo -n` ; echo $rx_jumbo
rx=`/sbin/ethtool -g $interface | grep -A4 "Pre-set maximums" | grep "RX:" | gawk -F":" '{ print $2 }' | xargs echo -n` ; echo $rx
tx=`/sbin/ethtool -g $interface | grep -A4 "Pre-set maximums" | grep "TX:" | gawk -F":" '{ print $2 }' | xargs echo -n` ; echo $tx

sudo /sbin/ethtool -G $interface rx $rx tx $tx rx-jumbo $rx_jumbo
sudo /sbin/ethtool -g $interface
echo "/sbin/ethtool -G $interface rx $rx tx $tx rx-jumbo $rx_jumbo" | sudo tee -a  /etc/rc.local

chmod +x /etc/rc.local

