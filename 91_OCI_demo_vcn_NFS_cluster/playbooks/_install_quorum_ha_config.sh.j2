#!/bin/bash

set -x


# https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/high_availability_add-on_reference/s1-quorumdev-haar


# Disable firewall in ansible. 

yum install pcs corosync-qnetd -y -q

systemctl start pcsd.service
systemctl enable pcsd.service


pcs qdevice setup model net --enable --start

# validate
pcs qdevice status net --full


# Set password for hacluster user on qdevice node also (if not already set)
passwd --status hacluster | grep "Password set" > /dev/null 2>&1
if [ $? -ne 0 ]; then
  echo -e "{{ hacluster_user_password }}\n{{ hacluster_user_password }}" | passwd hacluster
  if [ $? -ne 0 ]; then
    echo "Setting password value of {{ hacluster_user_password }} for hacluster failed"
    exit 1;
  fi
fi

# incase the corosync-qnetd service is killed using pkill. If the service is killed using pkill corosync-qnetd, the deamon doesn't restart.  If killed using kill -9 <pid>,  it respawns automatically. 
echo '#!/bin/bash

pcount=`ps -efw | grep "[c]orosync-qnetd" | wc -l` ;
if [ $pcount -eq 1 ]; then
  echo "process already running"
else
  echo "corosync-qnetd service is not running, restart it"
  systemctl start  corosync-qnetd
  #pcs qdevice setup model net --enable --start
fi
' > /root/corosync-qnetd-monitor.sh

chmod +x /root/corosync-qnetd-monitor.sh
echo  "* * * * * /root/corosync-qnetd-monitor.sh  "  >> /var/spool/cron/root
# tail -f /var/log/cron



# Cannot have infinite loop when invoked by ansible, as it will stall the rest of the deployment.
###node1_hostname="{{ storage_server_hostname_prefix }}1"
# check if corosync is up on one of the node using netcat
#corosync_udp_test
###yum install nc -y -q
###nc -vzu $node1_hostname 5405
###while ( [ $? -ne 0 ] )
###do
###sleep 5s
###nc -vzu $node1_hostname 5405
###done

# Extra time, incase multiple start of full cluster is required and for the loop to finish.
###sleep 60s
# Check again
###nc -vzu $node1_hostname 5405
###while ( [ $? -ne 0 ] )
###do
###sleep 5s
###nc -vzu $node1_hostname 5405
###done

###pcs qdevice status net --full
